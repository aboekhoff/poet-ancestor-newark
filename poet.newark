(import prelude)
(import poet/reader)
(import poet/env)
(import poet/expander)

(define-syntax with-spy
  ((with-spy header xs ...)
   (begin
     (println)
     (println (+ "[" header "]"))
     (spy xs ...))))

(define-syntax spy
  ((spy x)
   (let ((x* x))
     (pr (quote x))
     (print " => ")
     (prn x*)))
  ((spy x xs ...)
   (begin
     (spy x)
     (spy xs ...))))

(with-spy "reader-sanity-check"
 (read-form (Reader "42"))
 (number? (read-form (Reader "42")))
 (read-form (Reader "foo"))
 (symbol? (read-form (Reader "foo")))
 (read-form (Reader ":foo"))
 (keyword? (read-form (Reader ":foo")))
 (read-form (Reader "foo::bar"))
 (qualified-symbol? (read-form (Reader "foo::bar")))
 (terminal? ")")
 (not-constituent? ")")
 (read-form (Reader "(1 2 3 4 5 6)"))
 (read-form (Reader "[ a b (1 :foo 2 :bar 3 [4 5] 6) ]")))

(with-spy "to-key-sanity-check"
  (to-key "foo")
  (to-key 'foo)
  (to-key :foo)
  (to-key [:LABEL 'foo]))

(with-spy "to-name-sanity-check"
  (to-name 'foo)
  (to-name :foo)
  (to-name "foo"))

(define e0 (get-package "test"))
(define e1 (extend e0))
(define tag0 (make-tag e0))
(define tagged-foo (make-tagged-symbol 'foo tag0))

(with-spy "env-sanity-check"
 (to-key tagged-foo)
 (intern e0 'foo "bar")
 (lookup e0 'foo)
 (lookup e1 'foo)
 (intern e1 'foo "baz")
 (lookup e0 'foo)
 (lookup e1 'foo)
 (lookup e0 tagged-foo)
 (lookup e1 tagged-foo)
 (intern e0 tagged-foo "zonk")
 (lookup e1 tagged-foo)
 (intern e0 [:LABEL 'foo] 'foo)
 (lookup e0 [:LABEL 'foo]))

