(import prelude)

(define (make-generator)
  (let ((seed 0))
    (fn () (inc! seed) seed)))

(define next-tag-id (make-generator))
(define packages (object))

(define-type Env (package bindings))
(define-type Tag (env id))

(define (make-tag env)
  (new Tag env (next-tag-id)))

(define (make-env package bindings)
  (new Env package (or bindings (list (object)))))

(define (get-package package)
  (let ((package (to-name package)))
    (unless (. packages package)
            (set! (. packages package)
                  (make-env package)))
    (. packages package)))

(define (extend env)
  (new Env
       env.package
       (cons (object) env.bindings)))

(define (lookup* env key not-found)
  (do-list (b env.bindings)
    (when (has-property? k b)
          (return-from lookup (. b k)))))

(define (lookup env key not-found)
  (or (when (qualified-symbol? key)
            (lookup* (get-package key.qualifier)
                     (to-key key)
                     not-found))
      (lookup* env (to-key key))
      (when (tagged-symbol? key)
            (lookup key.tag.env key.child not-found))))

(define (intern env key val)
  (set! (first env.bindings) (to-key key) val))

(define-generic to-key (x))
(extend-generic to-key
  (js.String
   (fn (x) (+ "STRING(" x ")")))
  
  (js.Array
   (fn (x) (+ "[" (.join (map to-key x) " ") "]")))
  
  (Keyword
   (fn (x) (+ "KEYWORD(" x.name ")")))
  
  (Symbol
   (fn (x)
       (unless x.key
         (set! x.key
               (if (tagged-symbol? x)
                   (+ "TAG(" x.id + ")" (to-key x.child))
                   (+ "SYMBOL(" x.name ")"))))
       x.key)))

(define-generic to-name (x))
(extend-generic to-name
  (js.String (fn (x) x))
  (Keyword   (fn (x) x.name))
  (Symbol    (fn (x) x.name)))
